// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package order

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatCoffee is an auto-generated flat version of Coffee.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatCoffee struct {
	ID         *string          `mapstructure:"id" required:"true" cty:"id" hcl:"id"`
	Name       *string          `mapstructure:"name" required:"true" cty:"name" hcl:"name"`
	Ingredient []FlatIngredient `mapstructure:"ingredient" required:"true" cty:"ingredient" hcl:"ingredient"`
}

// FlatMapstructure returns a new FlatCoffee.
// FlatCoffee is an auto-generated flat version of Coffee.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Coffee) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatCoffee)
}

// HCL2Spec returns the hcl spec of a Coffee.
// This spec is used by HCL to read the fields of Coffee.
// The decoded values from this spec will then be applied to a FlatCoffee.
func (*FlatCoffee) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"id":         &hcldec.AttrSpec{Name: "id", Type: cty.String, Required: false},
		"name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"ingredient": &hcldec.BlockListSpec{TypeName: "ingredient", Nested: hcldec.ObjectSpec((*FlatIngredient)(nil).HCL2Spec())},
	}
	return s
}

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName     *string           `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType   *string           `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion   *string           `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug         *bool             `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce         *bool             `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError       *string           `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars      map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	Username            *string           `mapstructure:"username" required:"true" cty:"username" hcl:"username"`
	Password            *string           `mapstructure:"password" required:"true" cty:"password" hcl:"password"`
	Host                *string           `mapstructure:"host" cty:"host" hcl:"host"`
	Item                []FlatOrderItem   `mapstructure:"item" required:"true" cty:"item" hcl:"item"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":          &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":        &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":        &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":               &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":               &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":            &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":      &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"username":                   &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"password":                   &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"host":                       &hcldec.AttrSpec{Name: "host", Type: cty.String, Required: false},
		"item":                       &hcldec.BlockListSpec{TypeName: "item", Nested: hcldec.ObjectSpec((*FlatOrderItem)(nil).HCL2Spec())},
	}
	return s
}

// FlatIngredient is an auto-generated flat version of Ingredient.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatIngredient struct {
	ID       *string `mapstructure:"id" required:"true" cty:"id" hcl:"id"`
	Quantity *int    `mapstructure:"quantity" required:"true" cty:"quantity" hcl:"quantity"`
}

// FlatMapstructure returns a new FlatIngredient.
// FlatIngredient is an auto-generated flat version of Ingredient.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Ingredient) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatIngredient)
}

// HCL2Spec returns the hcl spec of a Ingredient.
// This spec is used by HCL to read the fields of Ingredient.
// The decoded values from this spec will then be applied to a FlatIngredient.
func (*FlatIngredient) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"id":       &hcldec.AttrSpec{Name: "id", Type: cty.String, Required: false},
		"quantity": &hcldec.AttrSpec{Name: "quantity", Type: cty.Number, Required: false},
	}
	return s
}

// FlatOrderItem is an auto-generated flat version of OrderItem.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatOrderItem struct {
	Coffee   *FlatCoffee `mapstructure:"coffee" required:"true" cty:"coffee" hcl:"coffee"`
	Quantity *int        `mapstructure:"quantity" cty:"quantity" hcl:"quantity"`
}

// FlatMapstructure returns a new FlatOrderItem.
// FlatOrderItem is an auto-generated flat version of OrderItem.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*OrderItem) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatOrderItem)
}

// HCL2Spec returns the hcl spec of a OrderItem.
// This spec is used by HCL to read the fields of OrderItem.
// The decoded values from this spec will then be applied to a FlatOrderItem.
func (*FlatOrderItem) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"coffee":   &hcldec.BlockSpec{TypeName: "coffee", Nested: hcldec.ObjectSpec((*FlatCoffee)(nil).HCL2Spec())},
		"quantity": &hcldec.AttrSpec{Name: "quantity", Type: cty.Number, Required: false},
	}
	return s
}
